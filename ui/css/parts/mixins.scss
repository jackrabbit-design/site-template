/* ========================================================================= */
/* !SASS VARIABLES & MIXINS */
/* ========================================================================= */

    @mixin size($w, $h: $w) { width: $w; height: $h; }

    // VERTICALLY CENTER CONTAINERS
    // EXAMPLE:
    // .parent {
    //     position: relative;
    //     .child {
    //         @include vCenter(false, true, false);
    //     }
    // }

    @mixin vCenter($left: true, $vertical: true, $right: true) {
        position: absolute;
        @if ($vertical) {
            left: 50%;
            top: 50%;
            transform: translate(-50%,-50%);
        } @else if ($left) {
            left: 0;
            top: 50%;
            transform: translate(0, -50%);
        } @else if ($right) {
            right: 0;
            top: 50%;
            transform: translate(0, -50%);
        }
    }

    // Breakpoint Mixin
    @mixin break($p, $b: 'max-width'){
        @media screen and ( $b: $p + px ){
            @content;
        }
    }

/*
    // Use Case: $b (second) variable is optional and defaults to 'max-width'

    @include break(1100){
        h1{
            background: red;
        }
    }

    // Output
    @media screen and (max-width: 1100px) {
        h1 { background: red; }
    }

    // Also, if you want to specify the 2nd variable for break type (i.e., min-height)

    @include break(1100, 'min-height'){
        h1 {
            background:red;
        }
    }

    // Output
    @media screen and (min-height: 1100px) {
        h1 { background: red; }
    }
*/

/*
    // inline SVGs
    // usage: background-image: inline-svg('<svg><!-- your svg code --></svg>');
*/
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@function url-encode($string) {
    $map: ( "%": "%25", "<": "%3C", ">": "%3E", "!": "%21", "*": "%2A", "'": "%27", '"': "%22", "(": "%28", ")": "%29", ";": "%3B", ":": "%3A", "@": "%40", "&": "%26", "=": "%3D", "+": "%2B", "$": "%24", ",": "%2C", "/": "%2F", "?": "%3F", "#": "%23", "[": "%5B", "]": "%5D" );
    $new: $string;
    @each $search, $replace in $map {
        $new: str-replace($new, $search, $replace);
    }
    @return $new;
}

@function inline-svg($string) {
    @return url('data:image/svg+xml,#{url-encode($string)}');
}
